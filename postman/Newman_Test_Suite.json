{
	"info": {
		"_postman_id": "newman-test-suite",
		"name": "Newman Test Suite",
		"description": "Автоматизированные тесты для Newman CI/CD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Smoke Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": ["{{base_url}}"],
							"path": ["actuator", "health"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Health check returns 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Application is UP', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal('UP');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Cache Warmup",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/cache/warmup",
							"host": ["{{base_url}}"],
							"path": ["api", "cache", "warmup"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cache warmup returns 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Cache warmup successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Instruments Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/summary",
							"host": ["{{base_url}}"],
							"path": ["api", "instruments", "summary"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Instruments summary returns 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Instruments loaded successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.total).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Limits Cache Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/limits/cache-stats",
							"host": ["{{base_url}}"],
							"path": ["api", "instruments", "limits", "cache-stats"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Limits cache stats returns 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Limits cache is populated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.cachedLimitsCount).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "API Tests",
			"item": [
				{
					"name": "Get All Shares",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/shares",
							"host": ["{{base_url}}"],
							"path": ["api", "instruments", "shares"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Shares API returns 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Shares API has correct structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.count).to.be.a('number');",
									"});",
									"",
									"pm.test('Response time is acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get All Futures",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/futures",
							"host": ["{{base_url}}"],
							"path": ["api", "instruments", "futures"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Futures API returns 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Futures API has correct structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.count).to.be.a('number');",
									"});",
									"",
									"pm.test('Response time is acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Search Instruments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/search?q={{search_query}}",
							"host": ["{{base_url}}"],
							"path": ["api", "instruments", "search"],
							"query": [
								{
									"key": "q",
									"value": "{{search_query}}"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Search API returns 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Search API has correct structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('totalCount');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.results).to.be.an('object');",
									"    pm.expect(jsonData.totalCount).to.be.a('number');",
									"});",
									"",
									"pm.test('Response time is acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Limits Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/limits/summary",
							"host": ["{{base_url}}"],
							"path": ["api", "instruments", "limits", "summary"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Limits summary returns 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Limits summary has correct structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('shares');",
									"    pm.expect(jsonData).to.have.property('futures');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.shares).to.be.an('object');",
									"    pm.expect(jsonData.futures).to.be.an('object');",
									"    pm.expect(jsonData.total).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Performance Tests",
			"item": [
				{
					"name": "Load Test - Multiple Requests",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/shares",
							"host": ["{{base_url}}"],
							"path": ["api", "instruments", "shares"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Performance test - Status 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Performance test - Response time < 2s', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Performance test - Response time < 1s (optimal)', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Установка переменных для Newman",
					"if (!pm.environment.get('search_query')) {",
					"    pm.environment.set('search_query', 'SBER');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Глобальные тесты для Newman",
					"pm.test('Global - Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"pm.test('Global - Response is JSON', function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"// Логирование для Newman",
					"console.log('Newman Test - URL:', pm.request.url.toString());",
					"console.log('Newman Test - Status:', pm.response.status);",
					"console.log('Newman Test - Response Time:', pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8084",
			"type": "string"
		},
		{
			"key": "search_query",
			"value": "SBER",
			"type": "string"
		}
	]
}


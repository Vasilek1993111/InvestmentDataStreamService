{
	"info": {
		"_postman_id": "investment-data-stream-service-api",
		"name": "Investment Data Stream Service API",
		"description": "–ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è API –¥–ª—è Investment Data Stream Service - —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "investment-data-stream-service"
	},
	"item": [
		{
			"name": "üè† Health & Status",
			"item": [
				{
					"name": "Application Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has status field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Application Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actuator/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"info"
							]
						},
						"description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
					},
					"response": []
				}
			],
			"description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
		},
		{
			"name": "üìä Instruments API",
			"item": [
				{
					"name": "Shares",
					"item": [
						{
							"name": "Get All Shares",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/shares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"shares"
									]
								},
								"description": "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ü–∏–∏ –∏–∑ –∫—ç—à–∞"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has success field', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success');",
											"    pm.expect(jsonData.success).to.be.true;",
											"});",
											"",
											"pm.test('Response has data array', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});",
											"",
											"pm.test('Response has count field', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData.count).to.be.a('number');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Get Share by FIGI",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/shares/{{share_figi}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"shares",
										"{{share_figi}}"
									]
								},
								"description": "–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ü–∏—é –ø–æ FIGI"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200 or 404', function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
											"});",
											"",
											"pm.test('Response has success field', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ü–∏—è–º–∏"
				},
				{
					"name": "Futures",
					"item": [
						{
							"name": "Get All Futures",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/futures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"futures"
									]
								},
								"description": "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ—å—é—á–µ—Ä—Å—ã –∏–∑ –∫—ç—à–∞"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has success field', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success');",
											"    pm.expect(jsonData.success).to.be.true;",
											"});",
											"",
											"pm.test('Response has data array', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Get Future by FIGI",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/futures/{{future_figi}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"futures",
										"{{future_figi}}"
									]
								},
								"description": "–ü–æ–ª—É—á–∏—Ç—å —Ñ—å—é—á–µ—Ä—Å –ø–æ FIGI"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200 or 404', function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
											"});",
											"",
											"pm.test('Response has success field', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—å—é—á–µ—Ä—Å–∞–º–∏"
				},
				{
					"name": "Indicatives",
					"item": [
						{
							"name": "Get All Indicatives",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/indicatives",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"indicatives"
									]
								},
								"description": "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –∫—ç—à–∞"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has success field', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success');",
											"    pm.expect(jsonData.success).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Get Indicative by FIGI",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/indicatives/{{indicative_figi}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"indicatives",
										"{{indicative_figi}}"
									]
								},
								"description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ FIGI"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200 or 404', function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
											"});",
											"",
											"pm.test('Response has success field', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"
				},
				{
					"name": "Search",
					"item": [
						{
							"name": "Search Instruments",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/search?q={{search_query}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "{{search_query}}",
											"description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
										}
									]
								},
								"description": "–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–∫–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has success field', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success');",
											"    pm.expect(jsonData.success).to.be.true;",
											"});",
											"",
											"pm.test('Response has results object', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('results');",
											"    pm.expect(jsonData.results).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
				},
				{
					"name": "Summary",
					"item": [
						{
							"name": "Get Instruments Summary",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/summary",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"summary"
									]
								},
								"description": "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has success field', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success');",
											"    pm.expect(jsonData.success).to.be.true;",
											"});",
											"",
											"pm.test('Response has shares count', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('shares');",
											"    pm.expect(jsonData.shares).to.be.a('number');",
											"});",
											"",
											"pm.test('Response has futures count', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('futures');",
											"    pm.expect(jsonData.futures).to.be.a('number');",
											"});",
											"",
											"pm.test('Response has indicatives count', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('indicatives');",
											"    pm.expect(jsonData.indicatives).to.be.a('number');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º"
				}
			],
			"description": "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"
		},
		{
			"name": "üìà Limits API",
			"item": [
				{
					"name": "Get Limits by FIGI",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/limits/{{limits_figi}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"instruments",
								"limits",
								"{{limits_figi}}"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ FIGI –∏–∑ –∫—ç—à–∞"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Shares Limits",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/limits/shares",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"instruments",
								"limits",
								"shares"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –≤—Å–µ—Ö –∞–∫—Ü–∏–π –∏–∑ –∫—ç—à–∞"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has data array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Futures Limits",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/limits/futures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"instruments",
								"limits",
								"futures"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –≤—Å–µ—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∏–∑ –∫—ç—à–∞"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has data array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Limits Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/limits/summary",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"instruments",
								"limits",
								"summary"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª–∏–º–∏—Ç–∞–º"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has shares object', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('shares');",
									"    pm.expect(jsonData.shares).to.be.an('object');",
									"});",
									"",
									"pm.test('Response has futures object', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('futures');",
									"    pm.expect(jsonData.futures).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Limits Cache Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/instruments/limits/cache-stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"instruments",
								"limits",
								"cache-stats"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –ª–∏–º–∏—Ç–æ–≤"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has cacheStats object', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('cacheStats');",
									"    pm.expect(jsonData.cacheStats).to.be.an('object');",
									"});",
									"",
									"pm.test('Response has cachedLimitsCount', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('cachedLimitsCount');",
									"    pm.expect(jsonData.cachedLimitsCount).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
		},
		{
			"name": "üóÑÔ∏è Cache Management",
			"item": [
				{
					"name": "Warmup Cache",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/cache/warmup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cache",
								"warmup"
							]
						},
						"description": "–ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ª–∏–º–∏—Ç–æ–≤"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has message field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Cache Content",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/cache/content",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cache",
								"content"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Cache Content by Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/cache/content?cacheName={{cache_name}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cache",
								"content"
							],
							"query": [
								{
									"key": "cacheName",
									"value": "{{cache_name}}",
									"description": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—ç—à–∞ (sharesCache, futuresCache, indicativesCache, limitsCache)"
								}
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—ç—à–∞"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Cache Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/cache/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cache",
								"stats"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫—ç—à–µ–π"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has caches object', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('caches');",
									"    pm.expect(jsonData.caches).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Clear All Caches",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/cache/clear",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cache",
								"clear"
							]
						},
						"description": "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à–∏"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Clear Cache by Name",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/cache/clear?cacheName={{cache_name}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"cache",
								"clear"
							],
							"query": [
								{
									"key": "cacheName",
									"value": "{{cache_name}}",
									"description": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"
								}
							]
						},
						"description": "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—ç—à"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
		},
		{
			"name": "üïØÔ∏è Candles API",
			"item": [
				{
					"name": "Start Candle Subscription",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/candles/subscription/start",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"candles",
								"subscription",
								"start"
							]
						},
						"description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–≤–µ—á–∏"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has message field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Stop Candle Subscription",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/candles/subscription/stop",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"candles",
								"subscription",
								"stop"
							]
						},
						"description": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–≤–µ—á–∏"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Candle Subscription Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/candles/subscription/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"candles",
								"subscription",
								"status"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–≤–µ—á–∏"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has isRunning field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('isRunning');",
									"    pm.expect(jsonData.isRunning).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Candle Subscription Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/candles/subscription/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"candles",
								"subscription",
								"stats"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–≤–µ—á–∏"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Response has isRunning field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('isRunning');",
									"    pm.expect(jsonData.isRunning).to.be.a('boolean');",
									"});",
									"",
									"pm.test('Response has totalReceived field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('totalReceived');",
									"    pm.expect(jsonData.totalReceived).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ —Å–≤–µ—á–∏"
		},
		{
			"name": "üì° Streaming Service API",
			"item": [
				{
					"name": "Start Streaming",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/streaming-service/start",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"streaming-service",
								"start"
							]
						},
						"description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Stop Streaming",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/streaming-service/stop",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"streaming-service",
								"stop"
							]
						},
						"description": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Reconnect Streaming",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/streaming-service/reconnect",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"streaming-service",
								"reconnect"
							]
						},
						"description": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Streaming Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/streaming-service/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"streaming-service",
								"status"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is boolean', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.be.oneOf(['true', 'false']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Streaming Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/streaming-service/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"streaming-service",
								"stats"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has totalReceived field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('totalReceived');",
									"    pm.expect(jsonData.totalReceived).to.be.a('number');",
									"});",
									"",
									"pm.test('Response has totalInserted field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('totalInserted');",
									"    pm.expect(jsonData.totalInserted).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Streaming Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/streaming-service/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"streaming-service",
								"health"
							]
						},
						"description": "–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has status field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º –¥–∞–Ω–Ω—ã—Ö"
		},
		{
			"name": "üß™ Test Scenarios",
			"item": [
				{
					"name": "Complete Workflow Test",
					"item": [
						{
							"name": "1. Check Application Health",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/actuator/health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"actuator",
										"health"
									]
								},
								"description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Application is healthy', function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.be.oneOf(['UP', 'UP']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "2. Warmup Cache",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/cache/warmup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"cache",
										"warmup"
									]
								},
								"description": "–ü—Ä–æ–≥—Ä–µ—Ç—å –∫—ç—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ª–∏–º–∏—Ç–æ–≤"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Cache warmup successful', function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "3. Check Instruments Summary",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/summary",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"summary"
									]
								},
								"description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Instruments loaded successfully', function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.total).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "4. Check Limits Cache Stats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/limits/cache-stats",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"limits",
										"cache-stats"
									]
								},
								"description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à –ª–∏–º–∏—Ç–æ–≤"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Limits cache is populated', function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.cachedLimitsCount).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "5. Test Search Functionality",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/search?q=SBER",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "SBER"
										}
									]
								},
								"description": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Search works correctly', function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.results).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
				},
				{
					"name": "Performance Test",
					"item": [
						{
							"name": "Load Test - Get All Shares",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/shares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"shares"
									]
								},
								"description": "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ü–∏–π"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response time is acceptable', function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Load Test - Get All Futures",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/futures",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"futures"
									]
								},
								"description": "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response time is acceptable', function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						},
						{
							"name": "Load Test - Get Limits Summary",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/instruments/limits/summary",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"instruments",
										"limits",
										"summary"
									]
								},
								"description": "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ª–∏–º–∏—Ç–æ–≤"
							},
							"response": [],
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response time is acceptable', function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							]
						}
					],
					"description": "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
				}
			],
			"description": "–ì–æ—Ç–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
					"if (!pm.environment.get('share_figi')) {",
					"    pm.environment.set('share_figi', 'BBG004S68758'); // SBER",
					"}",
					"",
					"if (!pm.environment.get('future_figi')) {",
					"    pm.environment.set('future_figi', 'FUTSBER03260'); // SBER —Ñ—å—é—á–µ—Ä—Å",
					"}",
					"",
					"if (!pm.environment.get('indicative_figi')) {",
					"    pm.environment.set('indicative_figi', 'TCS00A0JR514'); // –ò–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
					"}",
					"",
					"if (!pm.environment.get('limits_figi')) {",
					"    pm.environment.set('limits_figi', 'BBG004S68758'); // SBER –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤",
					"}",
					"",
					"if (!pm.environment.get('search_query')) {",
					"    pm.environment.set('search_query', 'SBER');",
					"}",
					"",
					"if (!pm.environment.get('cache_name')) {",
					"    pm.environment.set('cache_name', 'sharesCache');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"pm.test('Response has valid JSON', function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏",
					"console.log('Request URL:', pm.request.url.toString());",
					"console.log('Response Status:', pm.response.status);",
					"console.log('Response Time:', pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8084",
			"type": "string",
			"description": "–ë–∞–∑–æ–≤—ã–π URL API —Å–µ—Ä–≤–µ—Ä–∞"
		},
		{
			"key": "share_figi",
			"value": "BBG004S68758",
			"type": "string",
			"description": "FIGI –∞–∫—Ü–∏–∏ SBER –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
		},
		{
			"key": "future_figi",
			"value": "FUTSBER03260",
			"type": "string",
			"description": "FIGI —Ñ—å—é—á–µ—Ä—Å–∞ SBER –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
		},
		{
			"key": "indicative_figi",
			"value": "TCS00A0JR514",
			"type": "string",
			"description": "FIGI –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
		},
		{
			"key": "limits_figi",
			"value": "BBG004S68758",
			"type": "string",
			"description": "FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"
		},
		{
			"key": "search_query",
			"value": "SBER",
			"type": "string",
			"description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
		},
		{
			"key": "cache_name",
			"value": "sharesCache",
			"type": "string",
			"description": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
		}
	]
}


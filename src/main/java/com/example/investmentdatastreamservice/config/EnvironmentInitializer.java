package com.example.investmentdatastreamservice.config;

import io.github.cdimascio.dotenv.Dotenv;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.MapPropertySource;

import java.util.HashMap;
import java.util.Map;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–æ–≤
 * 
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Spring Context
 * –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª—é–±—ã—Ö –±–∏–Ω–æ–≤, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
 */
public class EnvironmentInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {

    private static final Logger logger = LoggerFactory.getLogger(EnvironmentInitializer.class);

    @Override
    public void initialize(ConfigurableApplicationContext applicationContext) {
        ConfigurableEnvironment environment = applicationContext.getEnvironment();
        
        String activeProfile = environment.getActiveProfiles().length > 0 
            ? environment.getActiveProfiles()[0] 
            : "default";

        String envFile = getEnvFileName(activeProfile);
        
        logger.info("=== LOADING ENVIRONMENT VARIABLES ===");
        logger.info("Active profile: {}", activeProfile);
        logger.info("Looking for environment file: {}", envFile);
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
            Dotenv dotenv = Dotenv.configure()
                .filename(envFile)
                .ignoreIfMalformed()
                .ignoreIfMissing()
                .load();

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Map
            Map<String, Object> envProperties = new HashMap<>();
            dotenv.entries().forEach(entry -> {
                envProperties.put(entry.getKey(), entry.getValue());
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Spring Environment
            MapPropertySource propertySource = new MapPropertySource("dotenv", envProperties);
            environment.getPropertySources().addFirst(propertySource);

            logger.info("‚úÖ Loaded environment variables from: {}", envFile);
            logger.info("üîß Loaded {} environment variables", envProperties.size());
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (envProperties.containsKey("T_INVEST_TEST_TOKEN")) {
                String token = envProperties.get("T_INVEST_TEST_TOKEN").toString();
                logger.info("üîë T_INVEST_TEST_TOKEN found: {}", 
                    token.length() > 4 ? token.substring(0, 4) + "***" : "***");
            } else {
                logger.warn("‚ùå T_INVEST_TEST_TOKEN not found in {}", envFile);
            }

            if (envProperties.containsKey("SPRING_DATASOURCE_TEST_USERNAME")) {
                logger.info("üîë SPRING_DATASOURCE_TEST_USERNAME found: {}", 
                    envProperties.get("SPRING_DATASOURCE_TEST_USERNAME"));
            } else {
                logger.warn("‚ùå SPRING_DATASOURCE_TEST_USERNAME not found in {}", envFile);
            }

        } catch (Exception e) {
            logger.warn("‚ö†Ô∏è  Warning: Could not load {} - using default values", envFile);
            logger.warn("üí° Create {} file based on {}.example", envFile, envFile);
            logger.warn("Error details: {}", e.getMessage());
        }

        logger.info("=== ENVIRONMENT LOADING COMPLETED ===");
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è .env —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
     */
    private String getEnvFileName(String activeProfile) {
        switch (activeProfile.toLowerCase()) {
            case "test":
                return ".env.test";
            case "prod":
            case "production":
                return ".env.prod";
            default:
                return ".env";
        }
    }
}

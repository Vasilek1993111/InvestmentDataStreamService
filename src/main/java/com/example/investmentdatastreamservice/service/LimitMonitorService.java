package com.example.investmentdatastreamservice.service;

import com.example.investmentdatastreamservice.dto.LimitAlertDto;
import com.example.investmentdatastreamservice.dto.LimitsDto;
import com.example.investmentdatastreamservice.entity.ShareEntity;
import com.example.investmentdatastreamservice.entity.FutureEntity;
import com.example.investmentdatastreamservice.entity.TradeEntity;
import com.example.investmentdatastreamservice.repository.ShareRepository;
import com.example.investmentdatastreamservice.repository.FutureRepository;
import com.example.investmentdatastreamservice.repository.TradeRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –ª–∏–º–∏—Ç–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 * 
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã LAST_PRICE –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
 * –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç–∞–º (1%) –∏–ª–∏ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏.
 */
@Service
public class LimitMonitorService {
    
    private static final Logger logger = LoggerFactory.getLogger(LimitMonitorService.class);
    
    private final LimitsService limitsService;
    private final TgBotService telegramBotService;
    private final ShareRepository shareRepository;
    private final FutureRepository futureRepository;
    private final TradeRepository tradeRepository;
    
    // –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
    private final Map<String, LocalDate> dailyNotifications = new ConcurrentHashMap<>();
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    private final AtomicLong totalAlertsProcessed = new AtomicLong(0);
    private final AtomicLong approachingLimitAlerts = new AtomicLong(0);
    private final AtomicLong limitReachedAlerts = new AtomicLong(0);
    private final AtomicLong notificationsSent = new AtomicLong(0);
    
    @Value("${TELEGRAM_LIMIT_CHANNEL_ID}")
    private String telegramChannelId;
    
    // –ü–æ—Ä–æ–≥ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –ª–∏–º–∏—Ç—É (1%)
    private static final BigDecimal APPROACH_THRESHOLD = new BigDecimal("0.2");
    
    public LimitMonitorService(
            LimitsService limitsService,
            TgBotService telegramBotService,
            ShareRepository shareRepository,
            FutureRepository futureRepository,
            TradeRepository tradeRepository) {
        this.limitsService = limitsService;
        this.telegramBotService = telegramBotService;
        this.shareRepository = shareRepository;
        this.futureRepository = futureRepository;
        this.tradeRepository = tradeRepository;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram –∫–∞–Ω–∞–ª–∞
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LimitMonitorService");
        if (telegramChannelId != null && !telegramChannelId.trim().isEmpty()) {
            logger.info("‚úÖ Telegram –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}", telegramChannelId);
        } else {
            logger.warn("‚ö†Ô∏è Telegram –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            logger.warn("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_LIMIT_CHANNEL_ID –≤ .env —Ñ–∞–π–ª");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö LAST_PRICE –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–º–∏—Ç–æ–≤
     * 
     * @param figi FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * @param currentPrice —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
     * @param eventTime –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
     */
    public void processLastPrice(String figi, BigDecimal currentPrice, LocalDateTime eventTime) {
        try {
            totalAlertsProcessed.incrementAndGet();
            
            // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            LimitsDto limits = limitsService.getLimitsFromCache(figi);
            if (limits == null || limits.getLimitUp() == null || limits.getLimitDown() == null) {
                logger.debug("–õ–∏–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {}", figi);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            String ticker = getTickerByFigi(figi);
            String instrumentName = getInstrumentNameByFigi(figi);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É –ª–∏–º–∏—Ç—É
            checkLimitApproach(figi, ticker, instrumentName, currentPrice, 
                             limits.getLimitUp(), "UP", eventTime, limits);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É –ª–∏–º–∏—Ç—É
            checkLimitApproach(figi, ticker, instrumentName, currentPrice, 
                             limits.getLimitDown(), "DOWN", eventTime, limits);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ LAST_PRICE –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–º–∏—Ç–æ–≤: {}", figi, e);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –ª–∏–º–∏—Ç—É
     */
    private void checkLimitApproach(String figi, String ticker, String instrumentName,
                                   BigDecimal currentPrice, BigDecimal limitPrice, 
                                   String limitType, LocalDateTime eventTime, LimitsDto limits) {
        
        if (limitPrice == null) {
            return;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ª–∏–º–∏—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        BigDecimal distanceToLimit = calculateDistanceToLimit(currentPrice, limitPrice);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç
        boolean isLimitReached = isLimitReached(currentPrice, limitPrice, limitType);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –ª–∏ –∫ –ª–∏–º–∏—Ç—É (1%)
        boolean isApproachingLimit = distanceToLimit.compareTo(APPROACH_THRESHOLD) <= 0 && !isLimitReached;
        
        if (isLimitReached || isApproachingLimit) {
            // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            BigDecimal closePriceOs = getLastClosePrice(figi, "OS");
            BigDecimal closePriceEvening = getLastClosePrice(figi, "EVENING");
            
            // –°–æ–∑–¥–∞–µ–º DTO –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            LimitAlertDto alert = LimitAlertDto.builder()
                .figi(figi)
                .ticker(ticker)
                .instrumentName(instrumentName)
                .eventTime(eventTime)
                .currentPrice(currentPrice)
                .limitPrice(limitPrice)
                .limitType(limitType)
                .limitDown(limits.getLimitDown())
                .limitUp(limits.getLimitUp())
                .closePriceOs(closePriceOs)
                .closePriceEvening(closePriceEvening)
                .distanceToLimit(distanceToLimit.multiply(new BigDecimal("100"))) // –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                .isLimitReached(isLimitReached)
                .isApproachingLimit(isApproachingLimit)
                .build();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            sendLimitAlert(alert);
        }
    }
    
    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –ª–∏–º–∏—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    private BigDecimal calculateDistanceToLimit(BigDecimal currentPrice, BigDecimal limitPrice) {
        if (currentPrice == null || limitPrice == null || currentPrice.compareTo(BigDecimal.ZERO) == 0) {
            return BigDecimal.ZERO;
        }
        
        BigDecimal difference = limitPrice.subtract(currentPrice).abs();
        return difference.divide(currentPrice, 4, RoundingMode.HALF_UP);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç
     */
    private boolean isLimitReached(BigDecimal currentPrice, BigDecimal limitPrice, String limitType) {
        if ("UP".equals(limitType)) {
            return currentPrice.compareTo(limitPrice) >= 0;
        } else if ("DOWN".equals(limitType)) {
            return currentPrice.compareTo(limitPrice) <= 0;
        }
        return false;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
     */
    private BigDecimal getLastClosePrice(String figi, String sessionType) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            LocalDateTime today = LocalDateTime.now().withHour(0).withMinute(0).withSecond(0);
            
            // –î–ª—è –û–° —Å–µ—Å—Å–∏–∏ –∏—â–µ–º —Å–¥–µ–ª–∫–∏ —Å 9:00 –¥–æ 18:45
            if ("OS".equals(sessionType)) {
                LocalDateTime sessionStart = today.withHour(9).withMinute(0).withSecond(0);
                LocalDateTime sessionEnd = today.withHour(18).withMinute(45).withSecond(0);
                
                return tradeRepository.findByFigiAndDirectionOrderByTimeDesc(figi, "LAST_PRICE")
                    .stream()
                    .filter(trade -> trade.getId().getTime().isAfter(sessionStart) && 
                                   trade.getId().getTime().isBefore(sessionEnd))
                    .findFirst()
                    .map(TradeEntity::getPrice)
                    .orElse(null);
            }
            
            // –î–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Å–µ—Å—Å–∏–∏ –∏—â–µ–º —Å–¥–µ–ª–∫–∏ —Å 19:05 –¥–æ 23:50
            if ("EVENING".equals(sessionType)) {
                LocalDateTime sessionStart = today.withHour(19).withMinute(5).withSecond(0);
                LocalDateTime sessionEnd = today.withHour(23).withMinute(50).withSecond(0);
                
                return tradeRepository.findByFigiAndDirectionOrderByTimeDesc(figi, "LAST_PRICE")
                    .stream()
                    .filter(trade -> trade.getId().getTime().isAfter(sessionStart) && 
                                   trade.getId().getTime().isBefore(sessionEnd))
                    .findFirst()
                    .map(TradeEntity::getPrice)
                    .orElse(null);
            }
            
            return null;
        } catch (Exception e) {
            logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {}: {}", figi, e.getMessage());
            return null;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ
     */
    private void sendLimitAlert(LimitAlertDto alert) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            String alertKey = alert.getFigi() + "_" + alert.getLimitType() + "_" + 
                            (alert.isLimitReached() ? "REACHED" : "APPROACHING");
            LocalDate today = LocalDate.now();
            
            if (dailyNotifications.containsKey(alertKey) && 
                dailyNotifications.get(alertKey).equals(today)) {
                logger.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è", alertKey);
                return;
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            String message = formatLimitAlertMessage(alert);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if (telegramChannelId != null && !telegramChannelId.trim().isEmpty()) {
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ –≤ Telegram –∫–∞–Ω–∞–ª: {}", telegramChannelId);
                logger.info("üìä –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –¢–∏–∫–µ—Ä: {}, FIGI: {}, –¢–∏–ø –ª–∏–º–∏—Ç–∞: {}, –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {}, –õ–∏–º–∏—Ç: {}", 
                           alert.getTicker(), alert.getFigi(), alert.getLimitType(), 
                           alert.getCurrentPrice(), alert.getLimitPrice());
                
                telegramBotService.sendText(telegramChannelId, message);
                
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –∫–∞–Ω–∞–ª: {} –¥–ª—è —Ç–∏–∫–µ—Ä–∞: {}", 
                           telegramChannelId, alert.getTicker());
            } else {
                logger.warn("‚ùå Telegram channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∑–Ω–∞—á–µ–Ω–∏–µ: '{}'), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", 
                           telegramChannelId != null ? telegramChannelId : "null");
                logger.warn("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_LIMIT_CHANNEL_ID –≤ .env —Ñ–∞–π–ª");
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if (alert.isLimitReached()) {
                limitReachedAlerts.incrementAndGet();
            } else {
                approachingLimitAlerts.incrementAndGet();
            }
            notificationsSent.incrementAndGet();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            dailyNotifications.put(alertKey, today);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
     */
    private String formatLimitAlertMessage(LimitAlertDto alert) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");
        
        StringBuilder message = new StringBuilder();
        message.append("üö® ").append(alert.isLimitReached() ? "–õ–ò–ú–ò–¢ –î–û–°–¢–ò–ì–ù–£–¢" : "–ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï –ö –õ–ò–ú–ò–¢–£").append("\n\n");
        message.append("üìä –¢–∏–∫–µ—Ä: ").append(alert.getTicker()).append("\n");
        message.append("üîó FIGI: ").append(alert.getFigi()).append("\n");
        message.append("üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ").append(alert.getEventTime().format(formatter)).append("\n");
        message.append("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ").append(alert.getCurrentPrice()).append(" ‚ÇΩ\n");
        
        if (alert.getClosePriceOs() != null) {
            message.append("üìà –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –û–°: ").append(alert.getClosePriceOs()).append(" ‚ÇΩ\n");
        }
        if (alert.getClosePriceEvening() != null) {
            message.append("üåô –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–µ—á–µ—Ä–Ω–µ–π: ").append(alert.getClosePriceEvening()).append(" ‚ÇΩ\n");
        }
        
        message.append("üéØ –¢–∏–ø –ª–∏–º–∏—Ç–∞: ").append(alert.getLimitType()).append("\n");
        message.append("üìä –¶–µ–Ω–∞ –ª–∏–º–∏—Ç–∞: ").append(alert.getLimitPrice()).append(" ‚ÇΩ\n");
        
        if (alert.isApproachingLimit()) {
            message.append("‚ö†Ô∏è –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ª–∏–º–∏—Ç–∞: ").append(alert.getDistanceToLimit()).append("%\n");
        }
        
        return message.toString();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –ø–æ FIGI
     */
    private String getTickerByFigi(String figi) {
        try {
            ShareEntity share = shareRepository.findById(figi).orElse(null);
            if (share != null) {
                return share.getTicker();
            }
            
            FutureEntity future = futureRepository.findById(figi).orElse(null);
            if (future != null) {
                return future.getTicker();
            }
            
            return "UNKNOWN";
        } catch (Exception e) {
            logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è {}: {}", figi, e.getMessage());
            return "UNKNOWN";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ FIGI
     */
    private String getInstrumentNameByFigi(String figi) {
        try {
            ShareEntity share = shareRepository.findById(figi).orElse(null);
            if (share != null) {
                return share.getName();
            }
            
            FutureEntity future = futureRepository.findById(figi).orElse(null);
            if (future != null) {
                return future.getTicker();
            }
            
            return "Unknown Instrument";
        } catch (Exception e) {
            logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è {}: {}", figi, e.getMessage());
            return "Unknown Instrument";
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
     */
    public void clearDailyNotifications() {
        LocalDate today = LocalDate.now();
        dailyNotifications.entrySet().removeIf(entry -> !entry.getValue().equals(today));
        logger.info("–û—á–∏—â–µ–Ω –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏");
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–º–∏—Ç–æ–≤
     */
    public Map<String, Object> getStatistics() {
        return Map.of(
            "totalAlertsProcessed", totalAlertsProcessed.get(),
            "approachingLimitAlerts", approachingLimitAlerts.get(),
            "limitReachedAlerts", limitReachedAlerts.get(),
            "notificationsSent", notificationsSent.get(),
            "dailyNotificationsCount", dailyNotifications.size(),
            "telegramChannelConfigured", telegramChannelId != null && !telegramChannelId.trim().isEmpty()
        );
    }
}

package com.example.investmentdatastreamservice.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–º–∏—Ç–æ–≤
 * 
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
 */
@Service
public class LimitMonitoringScheduler {
    
    private static final Logger logger = LoggerFactory.getLogger(LimitMonitoringScheduler.class);
    
    private final LimitMonitorService limitMonitorService;
    
    public LimitMonitoringScheduler(LimitMonitorService limitMonitorService) {
        this.limitMonitorService = limitMonitorService;
    }
    
    /**
     * –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * 
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:01 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
     * –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏.
     */
    @Scheduled(cron = "0 1 0 * * *", zone = "Europe/Moscow")
    public void clearDailyNotificationsCache() {
        try {
            logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö");
            limitMonitorService.clearDailyNotifications();
            logger.info("‚úÖ –ö—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–º–∏—Ç–æ–≤
     * 
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
     * –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é.
     */
    @Scheduled(cron = "0 0 9 * * MON", zone = "Europe/Moscow")
    public void weeklyStatisticsReport() {
        try {
            logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–º–∏—Ç–æ–≤");
            
            var stats = limitMonitorService.getStatistics();
            
            logger.info("=== –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –õ–ò–ú–ò–¢–û–í ===");
            logger.info("üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {}", stats.get("totalAlertsProcessed"));
            logger.info("‚ö†Ô∏è –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É: {}", stats.get("approachingLimitAlerts"));
            logger.info("üö® –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {}", stats.get("limitReachedAlerts"));
            logger.info("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}", stats.get("notificationsSent"));
            logger.info("üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å: {}", stats.get("dailyNotificationsCount"));
            logger.info("ü§ñ Telegram –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}", stats.get("telegramChannelConfigured"));
            logger.info("================================================");
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
        }
    }
}

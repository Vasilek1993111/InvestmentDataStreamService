package com.example.investmentdatastreamservice.service;

import com.example.investmentdatastreamservice.entity.FutureEntity;
import com.example.investmentdatastreamservice.entity.IndicativeEntity;
import com.example.investmentdatastreamservice.entity.ShareEntity;
import com.example.investmentdatastreamservice.repository.FutureRepository;
import com.example.investmentdatastreamservice.repository.IndicativeRepository;
import com.example.investmentdatastreamservice.repository.ShareRepository;
import com.example.investmentdatastreamservice.dto.LimitsDto;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 * 
 * <p>
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
 * –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º.
 * </p>
 * 
 * <p>
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * </p>
 * <ul>
 * <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
 * <li>–†—É—á–Ω–æ–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É</li>
 * <li>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫—ç—à–∞</li>
 * <li>–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞</li>
 * </ul>
 * 
 * @author InvestmentDataStreamService
 * @version 1.0
 * @since 2024
 */
@Service
public class CacheWarmupService {

    private static final Logger logger = LoggerFactory.getLogger(CacheWarmupService.class);

    private final ShareRepository shareRepository;
    private final FutureRepository futureRepository;
    private final IndicativeRepository indicativeRepository;
    private final LimitsService limitsService;

    public CacheWarmupService(ShareRepository shareRepository, FutureRepository futureRepository,
            IndicativeRepository indicativeRepository, LimitsService limitsService) {
        this.shareRepository = shareRepository;
        this.futureRepository = futureRepository;
        this.indicativeRepository = indicativeRepository;
        this.limitsService = limitsService;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * 
     * <p>
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –∫—ç—à –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞:
     * </p>
     * <ul>
     * <li>–í—Å–µ –∞–∫—Ü–∏–∏</li>
     * <li>–í—Å–µ —Ñ—å—é—á–µ—Ä—Å—ã</li>
     * <li>–í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</li>
     * </ul>
     */
    @PostConstruct
    public void warmupCacheOnStartup() {
        logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...");

        try {
            long startTime = System.currentTimeMillis();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ü–∏–∏
            List<ShareEntity> shares = getAllShares();
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∞–∫—Ü–∏–π –≤ –∫—ç—à", shares.size());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—å—é—á–µ—Ä—Å—ã
            List<FutureEntity> futures = getAllFutures();
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Ñ—å—é—á–µ—Ä—Å–æ–≤ –≤ –∫—ç—à", futures.size());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            List<IndicativeEntity> indicatives = getAllIndicatives();
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à", indicatives.size());

            // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
            warmupLimitsCache(shares, futures);

            long duration = System.currentTimeMillis() - startTime;
            logger.info("–ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {} –º—Å. –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {}", duration,
                    shares.size() + futures.size() + indicatives.size());

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–≥—Ä–µ–≤–µ –∫—ç—à–∞: {}", e.getMessage(), e);
        }
    }

    /**
     * –†—É—á–Ω–æ–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞
     * 
     * <p>
     * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—ç—à –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ.
     * </p>
     * <p>
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     * </p>
     * 
     * @throws Exception –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
     */
    public void manualWarmupCache() throws Exception {
        logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...");

        try {
            long startTime = System.currentTimeMillis();

            // –û—á–∏—â–∞–µ–º –∫—ç—à–∏
            evictAllCaches();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ
            List<ShareEntity> shares = getAllShares();
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∞–∫—Ü–∏–π –≤ –∫—ç—à", shares.size());

            List<FutureEntity> futures = getAllFutures();
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Ñ—å—é—á–µ—Ä—Å–æ–≤ –≤ –∫—ç—à", futures.size());

            List<IndicativeEntity> indicatives = getAllIndicatives();
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à", indicatives.size());

            // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
            warmupLimitsCache(shares, futures);

            long duration = System.currentTimeMillis() - startTime;
            logger.info("–†—É—á–Ω–æ–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {} –º—Å. –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {}", duration,
                    shares.size() + futures.size() + indicatives.size());

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø—Ä–æ–≥—Ä–µ–≤–µ –∫—ç—à–∞: {}", e.getMessage(), e);
            throw e;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ü–∏–∏ –∏–∑ –∫—ç—à–∞
     * 
     * <p>
     * –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à. –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–∞—Ö
     * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞.
     * </p>
     * 
     * @return —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ü–∏–π
     */
    @Cacheable(value = "sharesCache", key = "'all'")
    public List<ShareEntity> getAllShares() {
        logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ü–∏–π –∏–∑ –ë–î");
        return shareRepository.findAll();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ—å—é—á–µ—Ä—Å—ã –∏–∑ –∫—ç—à–∞
     * 
     * <p>
     * –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à. –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–∞—Ö
     * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞.
     * </p>
     * 
     * @return —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤
     */
    @Cacheable(value = "futuresCache", key = "'all'")
    public List<FutureEntity> getAllFutures() {
        logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∏–∑ –ë–î");
        return futureRepository.findAll();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –∫—ç—à–∞
     * 
     * <p>
     * –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à. –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–∞—Ö
     * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞.
     * </p>
     * 
     * @return —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    @Cacheable(value = "indicativesCache", key = "'all'")
    public List<IndicativeEntity> getAllIndicatives() {
        logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î");
        return indicativeRepository.findAll();
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     * 
     * <p>
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–µ–π –∞–∫—Ü–∏–π, —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∏ –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
     * </p>
     */
    @CacheEvict(value = {"sharesCache", "futuresCache", "indicativesCache"}, allEntries = true)
    public void evictAllCaches() {
        logger.info("–í—Å–µ –∫—ç—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã");
    }


    /**
     * –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
     * 
     * <p>
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ü–∏–π –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –≤ –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ gracefully, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     * </p>
     * 
     * @param shares —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π
     * @param futures —Å–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤
     */
    private void warmupLimitsCache(List<ShareEntity> shares, List<FutureEntity> futures) {
        logger.info("üî• –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {} –∞–∫—Ü–∏–π –∏ {} —Ñ—å—é—á–µ—Ä—Å–æ–≤", 
                shares.size(), futures.size());
        
        long startTime = System.currentTimeMillis();
        int successCount = 0;
        int errorCount = 0;
        int skippedCount = 0;

        // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –∞–∫—Ü–∏–π
        logger.info("üìà –ü—Ä–æ–≥—Ä–µ–≤ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–∫—Ü–∏–π...");
        for (ShareEntity share : shares) {
            if (share.getFigi() != null && !share.getFigi().trim().isEmpty()) {
                try {
                    logger.debug("üîÑ –ó–∞–ø—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–∫—Ü–∏–∏: {} ({})", share.getTicker(), share.getFigi());
                    // –í—ã–∑—ã–≤–∞–µ–º getLimits - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
                    LimitsDto limits = limitsService.getLimits(share.getFigi());
                    if (limits != null && limits.getLimitDown() != null && limits.getLimitUp() != null) {
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (—Ç–∞–∫ –∫–∞–∫ @Cacheable –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞)
                        limitsService.saveLimitsToCache(share.getFigi(), limits);
                        successCount++;
                        logger.debug("‚úÖ –ê–∫—Ü–∏—è {} - –ª–∏–º–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à", share.getTicker());
                    } else {
                        errorCount++;
                        logger.debug("‚ö†Ô∏è –ê–∫—Ü–∏—è {} - –ª–∏–º–∏—Ç—ã –ø—É—Å—Ç—ã–µ", share.getTicker());
                    }
                } catch (Exception e) {
                    errorCount++;
                    logger.debug("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–∫—Ü–∏–∏ {}: {}", 
                            share.getFigi(), e.getMessage());
                }
            } else {
                skippedCount++;
            }
        }

        // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        logger.info("üìà –ü—Ä–æ–≥—Ä–µ–≤ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤...");
        for (FutureEntity future : futures) {
            if (future.getFigi() != null && !future.getFigi().trim().isEmpty()) {
                try {
                    logger.debug("üîÑ –ó–∞–ø—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–∞: {} ({})", future.getTicker(), future.getFigi());
                    // –í—ã–∑—ã–≤–∞–µ–º getLimits - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
                    LimitsDto limits = limitsService.getLimits(future.getFigi());
                    if (limits != null && limits.getLimitDown() != null && limits.getLimitUp() != null) {
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (—Ç–∞–∫ –∫–∞–∫ @Cacheable –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞)
                        limitsService.saveLimitsToCache(future.getFigi(), limits);
                        successCount++;
                        logger.debug("‚úÖ –§—å—é—á–µ—Ä—Å {} - –ª–∏–º–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à", future.getTicker());
                    } else {
                        errorCount++;
                        logger.debug("‚ö†Ô∏è –§—å—é—á–µ—Ä—Å {} - –ª–∏–º–∏—Ç—ã –ø—É—Å—Ç—ã–µ", future.getTicker());
                    }
                } catch (Exception e) {
                    errorCount++;
                    logger.debug("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–∞ {}: {}", 
                            future.getFigi(), e.getMessage());
                }
            } else {
                skippedCount++;
            }
        }

        long duration = System.currentTimeMillis() - startTime;
        logger.info("üî• –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {} –º—Å. –£—Å–ø–µ—à–Ω–æ: {}, –û—à–∏–±–æ–∫: {}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {}", 
                duration, successCount, errorCount, skippedCount);
        
        if (errorCount > 0) {
            logger.warn("–ü—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –∫—ç—à–∞ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–æ {} –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API –∏ —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.", errorCount);
        }
    }
}


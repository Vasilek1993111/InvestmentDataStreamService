package com.example.investmentdatastreamservice.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.math.BigDecimal;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.stereotype.Service;

import com.example.investmentdatastreamservice.dto.LimitsDto;
import com.example.investmentdatastreamservice.utils.QuotationUtils;

import ru.tinkoff.piapi.core.MarketDataService;
import ru.tinkoff.piapi.contract.v1.GetOrderBookResponse;
import ru.tinkoff.piapi.contract.v1.Quotation;

import java.util.HashMap;
import java.util.Map;

@Service
public class LimitsService {
    private static final Logger logger = LoggerFactory.getLogger(LimitsService.class);
    private final MarketDataService marketDataService;
    private final CacheManager cacheManager;
    
    public LimitsService(MarketDataService marketDataService, CacheManager cacheManager) {
        this.marketDataService = marketDataService;
        this.cacheManager = cacheManager;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
     * 
     * –õ–∏–º–∏—Ç—ã –∫—ç—à–∏—Ä—É—é—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
     * 
     * @param instrumentId FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * @return –ª–∏–º–∏—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    @Cacheable(value = "limitsCache", key = "#instrumentId")
    public LimitsDto getLimits(String instrumentId) {
        logger.info("üîç API –ó–ê–ü–†–û–° –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {}", instrumentId);
        try {
            if (marketDataService == null) {
                logger.error("MarketDataService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Tinkoff API.");
                return new LimitsDto(instrumentId, null, null);
            }
            
            GetOrderBookResponse limitsResponse = marketDataService.getOrderBook(instrumentId, 1).join();
            logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç OrderBook –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}: hasLimitUp={}, hasLimitDown={}",
                    instrumentId, limitsResponse.hasLimitUp(), limitsResponse.hasLimitDown());

            if (limitsResponse.hasLimitUp() && limitsResponse.hasLimitDown()) {
                Quotation limitUp = limitsResponse.getLimitUp();
                Quotation limitDown = limitsResponse.getLimitDown();

                BigDecimal limitDownDecimal = QuotationUtils.toBigDecimal(limitDown);
                BigDecimal limitUpDecimal = QuotationUtils.toBigDecimal(limitUp);

                LimitsDto limits = new LimitsDto(instrumentId, limitDownDecimal, limitUpDecimal);
                
                logger.info(
                        "‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}: limitDown={}, limitUp={} - –ë–£–î–ï–¢ –°–û–•–†–ê–ù–ï–ù–û –í –ö–≠–®",
                        instrumentId, limitDownDecimal, limitUpDecimal);

                return limits;
            } else {
                logger.warn("–õ–∏–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ OrderBook –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}: hasLimitUp={}, hasLimitDown={}",
                        instrumentId, limitsResponse.hasLimitUp(), limitsResponse.hasLimitDown());
            }

        } catch (Exception ex) {
            if (ex.getMessage() != null && ex.getMessage().contains("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")) {
                logger.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}: {}", instrumentId, ex.getMessage());
                logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ Tinkoff API –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
            } else {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}: {}", instrumentId, ex.getMessage(), ex);
            }
        }
        logger.warn("‚ùå –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}", instrumentId);
        return new LimitsDto(instrumentId, null, null);
    }


    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã –≤ –∫—ç—à
     * 
     * @param instrumentId FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * @param limits –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    public void saveLimitsToCache(String instrumentId, LimitsDto limits) {
        try {
            Cache cache = cacheManager.getCache("limitsCache");
            if (cache != null) {
                cache.put(instrumentId, limits);
                logger.debug("‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à", instrumentId);
            } else {
                logger.error("‚ùå –ö—ç—à 'limitsCache' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –≤ –∫—ç—à –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}: {}", instrumentId, e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –∏–∑ –∫—ç—à–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
     * 
     * @param instrumentId FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * @return –ª–∏–º–∏—Ç—ã –∏–∑ –∫—ç—à–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
     */
    public LimitsDto getLimitsFromCache(String instrumentId) {
        try {
            Cache cache = cacheManager.getCache("limitsCache");
            if (cache != null) {
                logger.debug("üîç –ü–æ–∏—Å–∫ –≤ –∫—ç—à–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {}", instrumentId);
                Cache.ValueWrapper wrapper = cache.get(instrumentId);
                if (wrapper != null) {
                    LimitsDto limits = (LimitsDto) wrapper.get();
                    logger.info("‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {} –ù–ê–ô–î–ï–ù–´ –≤ –∫—ç—à–µ: {}", instrumentId, limits);
                    return limits;
                } else {
                    logger.warn("‚ùå –õ–∏–º–∏—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {} –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ –∫—ç—à–µ", instrumentId);
                }
            } else {
                logger.error("‚ùå –ö—ç—à 'limitsCache' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            return null;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –∫—ç—à–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}: {}", instrumentId, e.getMessage());
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–∏–º–∏—Ç—ã –∏–∑ –∫—ç—à–∞
     * 
     * @return Map —Å FIGI –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
     */
    public Map<String, LimitsDto> getAllLimitsFromCache() {
        Map<String, LimitsDto> allLimits = new HashMap<>();
        try {
            Cache cache = cacheManager.getCache("limitsCache");
            if (cache != null) {
                logger.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –∫—ç—à–∞...");
                @SuppressWarnings("unchecked")
                com.github.benmanes.caffeine.cache.Cache<String, LimitsDto> caffeineCache = 
                    (com.github.benmanes.caffeine.cache.Cache<String, LimitsDto>) cache.getNativeCache();
                if (caffeineCache != null) {
                    logger.info("üìä Caffeine –∫—ç—à –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {}", caffeineCache.estimatedSize());
                    caffeineCache.asMap().forEach((key, value) -> {
                        if (value != null) {
                            allLimits.put(key, value);
                            logger.debug("‚úÖ –ù–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {} -> {}", key, value);
                        }
                    });
                    logger.info("üìä –í—Å–µ–≥–æ –ª–∏–º–∏—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞: {}", allLimits.size());
                } else {
                    logger.error("‚ùå Caffeine –∫—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                }
            } else {
                logger.error("‚ùå Spring –∫—ç—à 'limitsCache' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –∫—ç—à–∞: {}", e.getMessage(), e);
        }
        return allLimits;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ª–∏–º–∏—Ç—ã –≤ –∫—ç—à–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * 
     * @param instrumentId FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * @return true, –µ—Å–ª–∏ –ª–∏–º–∏—Ç—ã –µ—Å—Ç—å –≤ –∫—ç—à–µ
     */
    public boolean hasLimitsInCache(String instrumentId) {
        return getLimitsFromCache(instrumentId) != null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –ª–∏–º–∏—Ç–æ–≤
     * 
     * @return —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
     */
    public Map<String, Object> getCacheStats() {
        Map<String, Object> stats = new HashMap<>();
        try {
            Cache cache = cacheManager.getCache("limitsCache");
            if (cache != null) {
                @SuppressWarnings("unchecked")
                com.github.benmanes.caffeine.cache.Cache<String, LimitsDto> caffeineCache = 
                    (com.github.benmanes.caffeine.cache.Cache<String, LimitsDto>) cache.getNativeCache();
                if (caffeineCache != null) {
                    stats.put("size", caffeineCache.estimatedSize());
                    stats.put("hitRate", caffeineCache.stats().hitRate());
                    stats.put("missRate", caffeineCache.stats().missRate());
                    stats.put("requestCount", caffeineCache.stats().requestCount());
                }
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", e.getMessage());
        }
        return stats;
    }
}

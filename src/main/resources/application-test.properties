# ===========================================
# TEST ENVIRONMENT CONFIGURATION
# ===========================================
# Конфигурация для тестового окружения
# Использует локальную БД с тестовыми данными

# ===========================================
# APPLICATION SETTINGS
# ===========================================
spring.application.name=investment-data-stream-service

# Server configuration
server.port=8084
server.servlet.context-path=/

# ===========================================
# DATABASE CONFIGURATION (LOCAL)
# ===========================================
# Основная БД для тестирования - используем переменные окружения
spring.datasource.url=${SPRING_DATASOURCE_TEST_URL:jdbc:postgresql://localhost:5434/postgres?reWriteBatchedInserts=true&currentSchema=invest}
spring.datasource.username=${SPRING_DATASOURCE_TEST_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_TEST_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Пул соединений для тестирования (меньше ресурсов)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.leak-detection-threshold=30000
spring.datasource.hikari.connection-init-sql=SET search_path TO invest, public;

# Второй пул для потоковых данных (тестовый) - используем переменные окружения
spring.datasource.stream.url=${SPRING_DATASOURCE_TEST_URL:jdbc:postgresql://localhost:5434/postgres?reWriteBatchedInserts=true&currentSchema=invest}
spring.datasource.stream.username=${SPRING_DATASOURCE_TEST_USERNAME}
spring.datasource.stream.password=${SPRING_DATASOURCE_TEST_PASSWORD}
spring.datasource.stream.driver-class-name=org.postgresql.Driver
spring.datasource.stream.hikari.maximum-pool-size=15
spring.datasource.stream.hikari.minimum-idle=5
spring.datasource.stream.hikari.connection-timeout=10000
spring.datasource.stream.hikari.idle-timeout=300000
spring.datasource.stream.hikari.max-lifetime=600000
spring.datasource.stream.hikari.leak-detection-threshold=30000

# ===========================================
# JPA / HIBERNATE CONFIGURATION
# ===========================================
# Настройки для тестирования
# Используем автоматическое управление схемой Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.jdbc.batch_size=500
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ===========================================
# TINKOFF API CONFIGURATION
# ===========================================
# Токен для тестирования (должен быть в переменных окружения)
tinkoff.api.token=${T_INVEST_TEST_TOKEN}
tinkoff.api.base-url=invest-public-api.tinkoff.ru
tinkoff.api.port=443
tinkoff.api.timeout=30000

# ===========================================
# PERFORMANCE SETTINGS (TEST)
# ===========================================
# Настройки производительности для тестирования
app.performance.trade-insert-threads=4
app.performance.max-concurrent-inserts=50
app.performance.reconnect-delay-ms=2000
app.performance.batch-size=100



# ===========================================
# MONITORING & MANAGEMENT (TEST)
# ===========================================
# Actuator endpoints для тестирования
management.endpoints.web.exposure.include=health,info,metrics,env,configprops
management.endpoint.health.show-details=always
management.endpoint.info.enabled=true
management.endpoint.metrics.enabled=true
management.info.env.enabled=true

# Health checks
management.health.db.enabled=true
management.health.diskspace.enabled=true
management.health.defaults.enabled=true

# ===========================================
# ERROR HANDLING (TEST)
# ===========================================
# Детальная обработка ошибок для тестирования
server.error.include-stacktrace=always
server.error.include-message=always
server.error.include-binding-errors=always

# ===========================================
# SPRING BOOT DEVTOOLS CONFIGURATION
# ===========================================
# Включаем DevTools для hot reload
spring.devtools.restart.enabled=true
spring.devtools.restart.additional-paths=src/main/java
spring.devtools.restart.exclude=static/**,public/**,templates/**,**/*.log,logs/**

# Отключаем кэширование для быстрой разработки
spring.thymeleaf.cache=false
spring.freemarker.cache=false
spring.groovy.template.cache=false

# LiveReload для автоматического обновления браузера (если используется)
spring.devtools.livereload.enabled=true
spring.devtools.livereload.port=35729

# Настройки перезапуска при изменениях
spring.devtools.restart.poll-interval=1000
spring.devtools.restart.quiet-period=400

# Логирование для отладки
spring.devtools.restart.log-condition-evaluation-delta=false
